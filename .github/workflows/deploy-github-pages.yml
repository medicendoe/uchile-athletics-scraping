name: Deploy to GitHub Pages

env:
  UPSLAT_USERNAME: ${{ vars.UPSLAT_USERNAME }}
  UPSLAT_PASSWORD: ${{ secrets.UPSLAT_PASSWORD }}
  ATHLETES: ${{ vars.ATHLETES }}

on:
  # Ejecutar manualmente
  workflow_dispatch:
  
  # Ejecutar automáticamente cada día a las 6:00 AM UTC
  schedule:
    - cron: '0 6 * * *'
  
  # Ejecutar en push a main
  push:
    branches:
      - main

# Permisos necesarios para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Solo permitir un deployment a la vez
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  scrape-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create required directories
        run: |
          mkdir -p data
          mkdir -p dist
          
      - name: Create .env file
        run: |
          echo "UPSLAT_USERNAME=$UPSLAT_USERNAME" > .env
          echo "UPSLAT_PASSWORD=$UPSLAT_PASSWORD" >> .env
          echo "ATHLETES=$ATHLETES" >> .env
          echo "NODE_ENV=production" >> .env
          
      - name: Build and run scraper container
        run: |
          # Construir el contenedor del scraper
          docker build -t atletismo-scraper ./scraper
          
          # Ejecutar el scraper con las variables de entorno
          docker run --rm \
            -v "$PWD/data:/app/data" \
            --env-file .env \
            --name atletismo-scraper-run \
            atletismo-scraper
            
      - name: Verify scraped data
        run: |
          echo "Checking scraped data..."
          ls -la data/ || echo "No data directory found"
          if [ -f "data/upslat-scrape-results.json" ]; then
            echo "Scraper data found!"
            wc -l data/upslat-scrape-results.json
          else
            echo "Warning: No scraper results found"
          fi
          
      - name: Build and run web builder container
        run: |
          # Construir el contenedor del generador web
          docker build -t atletismo-web-builder ./web
          
          # Ejecutar el generador web que copia datos y construye el sitio
          docker run --rm \
            -v "$PWD/data:/tmp/data:ro" \
            -v "$PWD/dist:/app/output" \
            --env-file .env \
            --name atletismo-web-builder-run \
            atletismo-web-builder
        
      - name: Add .nojekyll file for GitHub Pages
        run: |
          touch dist/.nojekyll
          echo "Created .nojekyll file for GitHub Pages"
          
      - name: Clean up sensitive files
        run: |
          rm -f .env
          echo "Cleaned up temporary files"
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: scrape-and-build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
