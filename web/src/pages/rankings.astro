---
import Layout from '../layouts/Layout.astro';
import { loadScrapingData, getAllEvents, formatTime, formatWind, formatDate, compareMeasurements } from '../utils/dataUtils';

const data = loadScrapingData();
const athletes = data.data;
const allEvents = getAllEvents(athletes);

// Obtener evento seleccionado del query string (en build time no hay query, usar el primer evento)
const selectedEvent = allEvents[0] || '';

// Crear rankings por evento
const createEventRanking = (eventName: string) => {
    const records: Array<{
        athlete: string;
        athleteId: string;
        measurement: string;
        wind: string;
        date: string;
        type: 'PB' | 'SB';
    }> = [];

    athletes.forEach(athlete => {
        // Marcas personales
        athlete.personalBests
            .filter(pb => pb.event === eventName)
            .forEach(pb => {
                records.push({
                    athlete: athlete.name,
                    athleteId: athlete.UpslatId,
                    measurement: pb.record.measurement,
                    wind: pb.record.wind,
                    date: pb.date,
                    type: 'PB'
                });
            });

        // Mejores de temporada
        athlete.seasonalBests
            .filter(sb => sb.event === eventName)
            .forEach(sb => {
                records.push({
                    athlete: athlete.name,
                    athleteId: athlete.UpslatId,
                    measurement: sb.record.measurement,
                    wind: sb.record.wind,
                    date: sb.date,
                    type: 'SB'
                });
            });
    });

    // Filtrar marcas válidas y ordenar
    const validRecords = records.filter(record => 
        record.measurement && record.measurement !== 'NM'
    );

    // Determinar si es evento de tiempo (menor es mejor) o distancia (mayor es mejor)
    const isTimeEvent = eventName.toLowerCase().includes('metros') && 
                       !eventName.toLowerCase().includes('salto') &&
                       !eventName.toLowerCase().includes('lanzamiento');

    validRecords.sort((a, b) => compareMeasurements(a.measurement, b.measurement, isTimeEvent));

    return validRecords;
};

const rankings = allEvents.map(event => ({
    event,
    records: createEventRanking(event)
}));

// Filtrar solo eventos con datos
const eventsWithData = rankings.filter(ranking => ranking.records.length > 0);
---

<Layout title="Rankings - Atletismo Stats">
    <div class="page-title">🏆 Rankings por Evento</div>
    <p class="page-description">
        Comparación de marcas por evento deportivo, ordenadas de mejor a peor.
    </p>

    {eventsWithData.length > 0 ? (
        <div>
            {eventsWithData.map(ranking => (
                <div class="card" style="margin-bottom: 2rem;">
                    <div class="card-header">
                        <h2 class="card-title">{ranking.event}</h2>
                        <p class="card-subtitle">{ranking.records.length} marcas registradas</p>
                    </div>
                    <div class="card-body">
                        <div style="overflow-x: auto;">
                            <table style="width: 100%; border-collapse: collapse;">
                                <thead>
                                    <tr style="border-bottom: 2px solid var(--border-color);">
                                        <th style="text-align: left; padding: 0.75rem; font-weight: 600; width: 60px;">Pos.</th>
                                        <th style="text-align: left; padding: 0.75rem; font-weight: 600;">Atleta</th>
                                        <th style="text-align: left; padding: 0.75rem; font-weight: 600;">Marca</th>
                                        <th style="text-align: left; padding: 0.75rem; font-weight: 600;">Viento</th>
                                        <th style="text-align: left; padding: 0.75rem; font-weight: 600;">Fecha</th>
                                        <th style="text-align: left; padding: 0.75rem; font-weight: 600;">Tipo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {ranking.records.slice(0, 20).map((record, index) => (
                                        <tr style={`border-bottom: 1px solid var(--border-color); ${index % 2 === 0 ? 'background: var(--background-color);' : ''}`}>
                                            <td style="padding: 0.75rem; font-weight: 600; color: var(--primary-color);">
                                                {index + 1}
                                            </td>
                                            <td style="padding: 0.75rem;">
                                                <a href={`/athletes/${record.athleteId}`} style="color: var(--primary-color); text-decoration: none; font-weight: 500;">
                                                    {record.athlete}
                                                </a>
                                            </td>
                                            <td style="padding: 0.75rem; font-weight: 600;">
                                                <span style={`color: ${index === 0 ? 'var(--accent-color)' : index < 3 ? 'var(--primary-color)' : 'var(--text-primary)'};`}>
                                                    {formatTime(record.measurement)}
                                                </span>
                                            </td>
                                            <td style="padding: 0.75rem; color: var(--text-secondary);">
                                                {formatWind(record.wind) || '-'}
                                            </td>
                                            <td style="padding: 0.75rem; color: var(--text-secondary);">
                                                {formatDate(record.date)}
                                            </td>
                                            <td style="padding: 0.75rem;">
                                                <span style={`padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.8rem; font-weight: 500; ${record.type === 'PB' ? 'background: #fef3c7; color: #92400e;' : 'background: #dcfce7; color: #166534;'}`}>
                                                    {record.type === 'PB' ? 'Mejor Personal' : 'Mejor 2025'}
                                                </span>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                        
                        {ranking.records.length > 20 && (
                            <div style="margin-top: 1rem; text-align: center; color: var(--text-secondary);">
                                Mostrando top 20 de {ranking.records.length} marcas
                            </div>
                        )}
                    </div>
                </div>
            ))}
        </div>
    ) : (
        <div class="card">
            <div class="card-body" style="text-align: center; padding: 3rem;">
                <p style="color: var(--text-secondary); font-size: 1.1rem;">
                    No hay datos de rankings disponibles.
                </p>
            </div>
        </div>
    )}

    <!-- Información adicional -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">ℹ️ Información sobre Rankings</h3>
        </div>
        <div class="card-body">
            <ul style="color: var(--text-secondary); line-height: 1.8;">
                <li><strong>Mejor Personal (PB):</strong> Mejores marcas históricas del atleta</li>
                <li><strong>Mejor 2025 (SB):</strong> Mejores marcas de la temporada actual</li>
                <li><strong>Ordenamiento:</strong> Para carreras (tiempo menor es mejor), para saltos/lanzamientos (distancia mayor es mejor)</li>
                <li><strong>Viento:</strong> Condiciones de viento registradas (+/- m/s)</li>
            </ul>
        </div>
    </div>
</Layout>
